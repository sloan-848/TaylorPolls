/* global Chart: false *//* Create chart data object */var dataObject = {  data : {    labels: ['President'],    datasets: [      {        label: 'Phil',        fillColor: '#FA6900',        strokeColor: 'rgba(220,220,220,0.8)',        highlightFill: '#F38630',        highlightStroke: 'rgba(220,220,220,1)',        data: [0]     },      {        label: 'Madison',        fillColor: '#69D2E7',        strokeColor: 'rgba(220,220,220,0.8)',        highlightFill: '#A7DBDB',        highlightStroke: 'rgba(220,220,220,1)',        data: [0]      }    ]  },  getData: function(){    return this.data;  },  setVotes: function(philC, madisonC){    this.data.datasets[0].data = [philC];    this.data.datasets[1].data = [madisonC];  }};/* Global reference for the chart */var ctx = $('#myChart').get(0).getContext('2d');var barChart;/* Utility function to determine if an address is a valid osu email */var isValidOsuEmail = function(address){  var re1='((?:[a-z][a-z]+))';  // Word 1  var re2='(\\.)';  // Any Single Character 1  var re3='(\\d+)'; // Integer Number 1  var re4='(@)';  // Any Single Character 2  var re5='(osu\\.edu)';  // Fully Qualified Domain Name 1  var re6='(buckeyemail\\.osu\\.edu)';  // Fully Qualified Domain Name 1  var osuRegex =  new RegExp(re1+re2+re3+re4+re5,['i']);  var buckeyemailRegex =  new RegExp(re1+re2+re3+re4+re6,['i']);  return osuRegex.test(address) || buckeyemailRegex.test(address);};/* * Counts votes and updates global dataObject * * Takes one parameter for data in JSON * Optional parameter for callback */var countVotes = function (data, callback){  var madisonCount = 0, philCount = 0;  /* Process ajax response and update counters */  for (var resp in data){    /* Check if the email is valid by regex */    if(!isValidOsuEmail(data[resp].email)){      console.log(data[resp].email, 'is NOT a valid osu email.');      continue;    }    /* Give vote to each contestant */    if(data[resp].vote_president === 'Madison Montgomery'){      madisonCount++;    } else if (data[resp].vote_president === 'Phil DeGennaro'){      philCount++;    }  }  /* Update global dataObject */  dataObject.setVotes(philCount, madisonCount);  console.log('About to update chart', dataObject.getData());  /* Request chart to update */  barChart = new Chart(ctx).Bar(dataObject.getData(), {    multiTooltipTemplate: '<%= datasetLabel %> - <%= value %>'  });};/* * Sends request to TaylorTower API to get vote count. *  * Takes callback function with one variable for data obtained from request. */var sendRequest = function(success_callback){  $.ajax({      url: 'http://taylortower.org/api/votes',      type: 'GET',      crossDomain: true,      dataType: 'jsonp',      success: function (data) {        countVotes(data);      },      error: function (xhr, status) {          console.log(status);      }  });};$(document).ready(function(){  sendRequest(countVotes); });$('#reloadBtn').click(function() {  sendRequest(countVotes);});